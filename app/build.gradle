apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin

android {
    signingConfigs {
        debug {
            storeFile file("${BUILD_SIGN_PATH}")
            storePassword "${BUILD_SIGN_PWD}"
            keyAlias "${BUILD_SIGN}"
            keyPassword "${BUILD_SIGN_PWD}"
        }
        release {
            storeFile file("${BUILD_SIGN_PATH}")
            storePassword "${BUILD_SIGN_PWD}"
            keyAlias "${BUILD_SIGN}"
            keyPassword "${BUILD_SIGN_PWD}"
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.MY_PKG[rootProject.ext.APP_CHOOSE]
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            //设置支持的SO库架构
            abiFilters /*'armeabi' , 'x86', */ 'armeabi-v7a',/* 'x86_64', */ 'arm64-v8a'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        buildConfigField 'java.util.Map<String, String>', 'MY_PKG', convertMap()
        buildConfigField 'String', 'APP_CHOOSE', "\"${APP_CHOOSE}\""
        signingConfig signingConfigs.debug
        manifestPlaceholders = [APP_NAME: "${APP_CHOOSE}", APP_ICON: getIcon()]
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/cpp/Android.mk'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // recommend
    dexOptions {
        //预编译
        preDexLibraries = false
    }

    //忽略一些异常提示
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    //配置自定义打包名称
    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName = rootProject.ext.APP_CHOOSE + "_v${variant.mergedFlavor.versionName}_" + new Date().format("yyyy-MM-dd") + "_" + variant.buildType.name + ".apk"
            outputFileName = fileName;
        }
    }
}
// 定义一个方法来根据传入的键打印键和值
def convertMap() {
    def builder = new StringBuilder()
    builder.append("new java.util.HashMap<String,String>() {{")
    rootProject.ext.MY_PKG.each { key, value ->
        builder.append("put(\"$key\",\"$value\");")
    }
    builder.append("}}")
    return builder.toString();
}

def getIcon() {
    if (rootProject.ext.MY_ICON.containsKey(rootProject.ext.APP_CHOOSE)) {
        return rootProject.ext.MY_ICON[rootProject.ext.APP_CHOOSE]
    } else {
        return null
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //support
    androidTestImplementation rootProject.ext.support["runner"]
    androidTestImplementation rootProject.ext.support["espresso"]
    api rootProject.ext.support["appcompat"]
    implementation rootProject.ext.support["constraint-layout"]
    implementation rootProject.ext.support["recyclerview-v7"]
    //权限获取
    api rootProject.ext.dependencies["rxpermissions"]
    //分包
    api rootProject.ext.support["multidex"]
    //jxl Excel表格操作
    api rootProject.ext.dependencies["jxlutils"]
    //socket client
    //api rootProject.ext.dependencies["socket-client"]
    //findByView butterknife
    implementation rootProject.ext.dependencies["butterknife"]
    implementation rootProject.ext.dependencies["AndroidAutoSize"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation rootProject.ext.support["annotations"]
    //implementation(rootProject.ext.dependencies["base_iotutils"]) {
    //    transitive = true
    //}
    implementation(rootProject.ext.dependencies["base_framework"]) {
        transitive = true
    }
    implementation rootProject.ext.dependencies["base_socket"]
    //第三方数据操作
    implementation rootProject.ext.dependencies["FastBle"]
    implementation rootProject.ext.dependencies["BluetoothHelper"]
    implementation rootProject.ext.dependencies["greendao"]
    //视频播放
    implementation rootProject.ext.dependencies["videoplay"]
    implementation rootProject.ext.dependencies["base_adapter"]
    implementation rootProject.ext.dependencies["android_shell"]
    //POI 操作Excel表格
    implementation files('libs\\poi-3.12-android-a.jar')
    //物联网开发基础工具类
    implementation project(path: ':base_iotutils')
    //TCP|UDP socket通信
    //implementation project(path: ':base_socket')
    //framework jarutils
    //implementation project(path: ':base_framework')
    // 替换成最新版本, 需要注意的是api
    // 要与compiler匹配使用，均使用最新版可以保证兼容
    api rootProject.ext.dependencies["arouter-api"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
}

greendao {
    schemaVersion 1 //当前数据库版本
}
